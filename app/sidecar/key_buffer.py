import os
import time
import threading
from flask import Flask, jsonify
import redis
from loguru import logger

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ YAML –º–∞–Ω–∏—Ñ–µ—Å—Ç –≤ Kubernetes) ===
REDIS_URL = os.environ.get("REDIS_URL", "redis://localhost:6379/0")
KEY_BATCH_SIZE = int(os.environ.get("KEY_BATCH_SIZE", 20))         # —Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π –±—Ä–∞—Ç—å –∑–∞ —Ä–∞–∑ –∏–∑ Redis
L2_MIN_KEYS = int(os.environ.get("L2_MIN_KEYS", 5))                # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
BUFFER_KEY_SET = os.environ.get("BUFFER_KEY_SET", "buffer_keys")  # –∏–º—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞-–±—É—Ñ–µ—Ä–∞ –≤ Redis
USED_KEY_ZSET = os.environ.get("USED_KEY_ZSET", "used_keys")      # –∏–º—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
FLASK_PORT = int(os.environ.get("FLASK_PORT", 8000))              # –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç Flask-—Å–µ—Ä–≤–µ—Ä

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis ===
r = redis.Redis.from_url(REDIS_URL)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)

# === L2-–∫—ç—à (–≤—Ç–æ—Ä–∏—á–Ω—ã–π –∫—ç—à –≤ –ø–∞–º—è—Ç–∏) ===
l2_cache = []
l2_lock = threading.Lock()  # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤

# === Lua-—Å–∫—Ä–∏–ø—Ç: –∞—Ç–æ–º–∞—Ä–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∫–ª—é—á–∏ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ Redis –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º ===
LUA_SCRIPT = """
local keys = redis.call('spop', KEYS[1], ARGV[1])
local now = tonumber(ARGV[2])
for _, key in ipairs(keys) do
    redis.call('zadd', KEYS[2], now, key)
end
return keys
"""

# === –ó–∞–≥—Ä—É–∑–∫–∞ Lua-—Å–∫—Ä–∏–ø—Ç–∞ –≤ Redis ===
try:
    LUA_SHA = r.script_load(LUA_SCRIPT)
    logger.info("‚úÖ Lua-—Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Redis.")
except redis.RedisError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Lua-—Å–∫—Ä–∏–ø—Ç–∞ –≤ Redis: {e}")
    raise

def fetch_keys_from_redis():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—á–∫—É –∫–ª—é—á–µ–π –∏–∑ Redis –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à"""
    try:
        now = int(time.time())
        keys = r.evalsha(LUA_SHA, 2, BUFFER_KEY_SET, USED_KEY_ZSET, KEY_BATCH_SIZE, now)
        keys = [key.decode("utf-8") for key in keys]
        if keys:
            with l2_lock:
                l2_cache.extend(keys)
            logger.info(f"üîÅ –ü–æ–ª—É—á–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π –∏–∑ Redis –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ L2-–∫—ç—à.")
        else:
            logger.warning("‚ö†Ô∏è Redis –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞. –í–æ–∑–º–æ–∂–Ω–æ, –±—É—Ñ–µ—Ä –ø—É—Å—Ç.")
    except redis.RedisError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Lua-—Å–∫—Ä–∏–ø—Ç–∞ Redis: {e}")

def l2_background_watcher():
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: —Å–ª–µ–¥–∏—Ç –∑–∞ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–µ–º –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    while True:
        try:
            with l2_lock:
                current_size = len(l2_cache)
            if current_size < L2_MIN_KEYS:
                logger.debug(f"üìâ L2-–∫—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç {current_size} –∫–ª—é—á–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ...")
                fetch_keys_from_redis()
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        time.sleep(1)

@app.route("/get-key", methods=["GET"])
def get_key():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –∫–ª—é—á –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ L2"""
    with l2_lock:
        if not l2_cache:
            logger.warning("üö´ –ö–ª—é—á–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º L2-–∫—ç—à–µ –Ω–µ—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º 503.")
            return jsonify({"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π"}), 503
        key = l2_cache.pop(0)
    logger.info(f"‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç—É: {key}")
    return jsonify({"key": key})

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è L2-–∫—ç—à–∞...")

    # –°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    threading.Thread(target=l2_background_watcher, daemon=True).start()

    # –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(debug=False, host="0.0.0.0", port=FLASK_PORT)
