import os
import time
import threading
from flask import Flask, jsonify
import redis
from loguru import logger
import queue
import requests

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ YAML –º–∞–Ω–∏—Ñ–µ—Å—Ç –≤ Kubernetes) ===
REDIS_URL = os.environ.get("REDIS_URL", "redis://localhost:6379/0")
KEY_BATCH_SIZE = int(os.environ.get("KEY_BATCH_SIZE", 20))         # —Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π –±—Ä–∞—Ç—å –∑–∞ —Ä–∞–∑ –∏–∑ Redis
BUFFER_KEY_SET = os.environ.get("BUFFER_KEY_SET", "buffer_keys")  # –∏–º—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞-–±—É—Ñ–µ—Ä–∞ –≤ Redis
USED_KEY_ZSET = os.environ.get("USED_KEY_ZSET", "used_keys")      # –∏–º—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
FLASK_PORT = int(os.environ.get("FLASK_PORT", 8000))              # –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç Flask-—Å–µ—Ä–≤–µ—Ä
PROMETHEUS_URL = os.environ.get("PROMETHEUS_URL")                  # URL Prometheus (–Ω–∞–ø—Ä–∏–º–µ—Ä http://prometheus:9090)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis ===
r = redis.Redis.from_url(REDIS_URL)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)

# === L2-–∫—ç—à (–≤—Ç–æ—Ä–∏—á–Ω—ã–π –∫—ç—à –≤ –ø–∞–º—è—Ç–∏) ===
l2_cache = queue.Queue()

# === Lua-—Å–∫—Ä–∏–ø—Ç: –∞—Ç–æ–º–∞—Ä–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∫–ª—é—á–∏ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ Redis –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º ===
LUA_SCRIPT = """
local keys = redis.call('spop', KEYS[1], ARGV[1])
local now = tonumber(ARGV[2])
for _, key in ipairs(keys) do
    redis.call('zadd', KEYS[2], now, key)
end
return keys
"""

# === –ó–∞–≥—Ä—É–∑–∫–∞ Lua-—Å–∫—Ä–∏–ø—Ç–∞ –≤ Redis ===
try:
    LUA_SHA = r.script_load(LUA_SCRIPT)
    logger.info("‚úÖ Lua-—Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Redis.")
except redis.RedisError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Lua-—Å–∫—Ä–∏–ø—Ç–∞ –≤ Redis: {e}")
    raise


def get_current_load_for_pod(prometheus_url: str) -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É (L) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ Django –∏–∑ Prometheus,
    –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –ø–æ–¥–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è POD_NAME.
    """
    pod_name = os.environ.get("POD_NAME")
    if not pod_name:
        logger.error("POD_NAME –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        return 0.0

    query = (
        f'sum(rate(django_http_requests_total_by_view_transport_method_total{{'
        f'view="note-list", method="POST", pod="{pod_name}"}}[5m])) * 300'
    )

    try:
        response = requests.get(f"{prometheus_url}/api/v1/query", params={'query': query}, timeout=5)
        result = response.json()

        if result['status'] == 'success' and result['data']['result']:
            value = float(result['data']['result'][0]['value'][1])
            logger.debug(f"–ù–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø–æ–¥–∞ {pod_name}: {value}")
            return value
        else:
            logger.warning(f"–ú–µ—Ç—Ä–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–¥–∞ {pod_name}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.0")
            return 0.0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Prometheus: {e}")
        return 0.0


def load_to_min_keys(load: float) -> int:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Å –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –¥–ª—è L2_MIN_KEYS.
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.

    –ù–∞–ø—Ä–∏–º–µ—Ä:
    - –ú–∏–Ω–∏–º—É–º 10 –∫–ª—é—á–µ–π –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ <= 10
    - –ü—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ –≤—ã—à–µ 10, –ª–∏–Ω–µ–π–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
    """
    base_min = 10
    if load <= 10:
        return base_min
    else:
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ +10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º 10 –∫–ª—é—á–µ–π
        extra_keys = int((load - 10) / 10) * 10
        return base_min + extra_keys


def fetch_keys_from_redis():
    try:
        now = int(time.time())
        keys = r.evalsha(LUA_SHA, 2, BUFFER_KEY_SET, USED_KEY_ZSET, KEY_BATCH_SIZE, now)
        keys = [key.decode("utf-8") for key in keys]
        if keys:
            for key in keys:
                l2_cache.put(key)  # –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ –∫–ª–∞–¥—ë–º –∫–ª—é—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
            logger.info(f"üîÅ –ü–æ–ª—É—á–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π –∏–∑ Redis –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ L2-–∫—ç—à.")
        else:
            logger.warning("‚ö†Ô∏è Redis –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞. –í–æ–∑–º–æ–∂–Ω–æ, –±—É—Ñ–µ—Ä –ø—É—Å—Ç.")
    except redis.RedisError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Lua-—Å–∫—Ä–∏–ø—Ç–∞ Redis: {e}")


def l2_background_watcher():
    while True:
        try:
            current_size = l2_cache.qsize()
            load = get_current_load_for_pod(PROMETHEUS_URL) if PROMETHEUS_URL else 0.0
            min_keys = load_to_min_keys(load)

            if current_size < min_keys:
                logger.debug(f"üìâ L2-–∫—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç {current_size} –∫–ª—é—á–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º {min_keys})...")
                fetch_keys_from_redis()
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        time.sleep(1)


@app.route("/get-key", methods=["GET"])
def get_key():
    try:
        key = l2_cache.get_nowait()  # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á, –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.info(f"‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç—É: {key}")
        return jsonify({"key": key})
    except queue.Empty:
        logger.warning("üö´ –ö–ª—é—á–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º L2-–∫—ç—à–µ –Ω–µ—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º 503.")
        return jsonify({"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π"}), 503


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è L2-–∫—ç—à–∞...")

    threading.Thread(target=l2_background_watcher, daemon=True).start()
    app.run(debug=False, host="0.0.0.0", port=FLASK_PORT)
