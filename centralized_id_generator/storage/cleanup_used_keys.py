import redis
import time
import os
from loguru import logger

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_DB = int(os.getenv("REDIS_DB", 0))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", None)
USED_KEYS_SET = os.getenv("USED_KEYS_SET", "used_keys")
EXPIRE_MINUTES = int(os.getenv("EXPIRE_MINUTES", 15))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
LOG_FILE = os.getenv("LOG_FILE", "/var/log/cleanup.log")

logger.remove()
logger.add(LOG_FILE, rotation="1 MB", retention="7 days", level=LOG_LEVEL)
logger.add(lambda msg: print(msg, end=""), level=LOG_LEVEL)

def main():
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Redis –∏ —É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏ –∏–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.
    
    –ö–ª—é—á–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏, –µ—Å–ª–∏ –∏—Ö score (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ UNIX) –º–µ–Ω—å—à–µ —á–µ–º N –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    - REDIS_HOST: —Ö–æ—Å—Ç Redis (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'localhost')
    - REDIS_PORT: –ø–æ—Ä—Ç Redis (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6379)
    - REDIS_DB: –Ω–æ–º–µ—Ä –±–∞–∑—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    - REDIS_PASSWORD: –ø–∞—Ä–æ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None)
    - USED_KEYS_SET: –∏–º—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'used_keys')
    - EXPIRE_MINUTES: –ø–æ—Ä–æ–≥ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15)
    - LOG_FILE: –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '/var/log/cleanup.log')
    - LOG_LEVEL: —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'INFO')
    """
    logger.info("üöÄ Starting cleanup script")

    try:
        r = redis.Redis(
            host=REDIS_HOST,
            port=REDIS_PORT,
            db=REDIS_DB,
            password=REDIS_PASSWORD,
            socket_timeout=5
        )
        logger.info(f"üîó Connected to Redis at {REDIS_HOST}:{REDIS_PORT}, DB {REDIS_DB}")
    except redis.RedisError as e:
        logger.error(f"‚ùå Redis connection failed: {e}")
        return

    current_time = time.time()
    threshold = current_time - EXPIRE_MINUTES * 60

    try:
        removed = r.zremrangebyscore(USED_KEYS_SET, 0, threshold)
        logger.success(f"üßπ Removed {removed} expired keys from '{USED_KEYS_SET}' (older than {EXPIRE_MINUTES} min)")
    except redis.RedisError as e:
        logger.error(f"‚ùå Failed to remove expired keys: {e}")

if __name__ == "__main__":
    main()
