import random
import string
import time
from datetime import datetime
from meilisearch import Client
from rich.console import Console
from rich.table import Table
from rich.progress import track

# ==================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====================
MEILISEARCH_URL = "http://localhost:7700"
API_KEY = ""  # –£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
INDEX_UID = "benchmark_index"
DOCUMENT_COUNT = 10_000
SEARCH_COUNT = 1_000
MAX_WORD_LENGTH = 6
console = Console()

# ==================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====================

def random_word(length=5):
    return ''.join(random.choices(string.ascii_lowercase, k=length))

def generate_document(i):
    return {
        "id": i,
        "title": f"Document {i} title",
        "content": " ".join([random_word(random.randint(2, MAX_WORD_LENGTH)) for _ in range(20)]),
        "timestamp": datetime.now().isoformat()
    }

# ==================== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ====================

def main():
    console.rule("[bold blue]–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Meilisearch")

    client = Client(MEILISEARCH_URL)

    # 1. –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        client.get_index(INDEX_UID).delete()
        console.print(f"[yellow]–°—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å '{INDEX_UID}' —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        console.print(f"[green]–ò–Ω–¥–µ–∫—Å '{INDEX_UID}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
    console.print(f"[blue]–°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å '{INDEX_UID}'...")
    task_info = client.create_index(uid=INDEX_UID)  # –ü–æ–ª—É—á–∞–µ–º TaskInfo

    # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
    while True:
        task = client.get_task(task_info.task_uid)
        if task.status == "succeeded" or task.status == "failed":
            break
        time.sleep(0.5)

    if task.status == "failed":
        console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {task.error}")
        return

    index = client.get_index(INDEX_UID)  # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    console.print(f"[green]–ò–Ω–¥–µ–∫—Å '{INDEX_UID}' —Å–æ–∑–¥–∞–Ω")

    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    console.print(f"[blue]–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {DOCUMENT_COUNT} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    documents = [generate_document(i) for i in track(range(DOCUMENT_COUNT), description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")]

    # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    console.print(f"[blue]–ó–∞–≥—Ä—É–∂–∞–µ–º {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Meilisearch...")

    task_info = index.add_documents(documents)

    # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    while True:
        task = client.get_task(task_info.task_uid)
        if task.status == "succeeded" or task.status == "failed":
            break
        time.sleep(0.5)

    if task.status == "failed":
        console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {task.error}")
        return

    console.print(f"[green]–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (ID –∑–∞–¥–∞—á–∏: {task_info.task_uid})")

    # 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
    console.print(f"[blue]–í—ã–ø–æ–ª–Ω—è–µ–º {SEARCH_COUNT} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")

    search_times = []
    for _ in track(range(SEARCH_COUNT), description="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤"):
        word = random_word(random.randint(2, MAX_WORD_LENGTH))
        start = time.time()
        try:
            results = index.search(word, {"limit": 10})
            duration = time.time() - start
            search_times.append(duration)
        except Exception as e:
            console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")

    # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_time = sum(search_times) / len(search_times)
    p95 = sorted(search_times)[int(len(search_times)*0.95)]

    table = Table(title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="magenta")

    table.add_row("–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", str(DOCUMENT_COUNT))
    table.add_row("–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤", str(SEARCH_COUNT))
    table.add_row("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞", f"{avg_time:.4f} —Å–µ–∫")
    table.add_row("P95 –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞", f"{p95:.4f} —Å–µ–∫")

    console.print(table)
    console.rule("[bold green]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()